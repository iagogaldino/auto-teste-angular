import dotenv from 'dotenv';
import { ChatGPTService } from './src/services/chatgptService';
import { UnitTestRequest } from './src/types/chatgpt';

// Carregar vari√°veis de ambiente
dotenv.config({ path: '.env' });

// Exigir a vari√°vel de ambiente OPENAI_API_KEY (n√£o hardcodear chaves)
if (!process.env.OPENAI_API_KEY) {
  console.error('OPENAI_API_KEY n√£o definida. Configure no arquivo .env');
  process.exit(1);
}

// C√≥digo do componente Angular para testar
const angularComponentCode = `import { Component, signal } from '@angular/core';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-calculator',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './calculator.component.html',
  styleUrl: './calculator.component.scss'
})
export class CalculatorComponent {
  result = signal<number>(0);

  calculate(): void {
    this.result.set(10 + 10);
  }

  // Fun√ß√£o utilit√°ria para testes
  addTenPlusTen(): number {
    return 10 + 10;
  }
}`;

async function testAngularComponent() {
  try {
    console.log('üß™ Testando gera√ß√£o de teste para componente Angular...\n');

    const chatGPTService = new ChatGPTService();

    // Teste de conectividade
    console.log('1. Testando conectividade...');
    const isConnected = await chatGPTService.testConnection();
    console.log(`   Conex√£o: ${isConnected ? '‚úÖ OK' : '‚ùå Falhou'}\n`);

    if (!isConnected) {
      console.log('‚ùå N√£o foi poss√≠vel conectar com ChatGPT.');
      return;
    }

    const unitTestRequest: UnitTestRequest = {
      code: angularComponentCode,
      language: 'typescript',
      framework: 'jest',
      testType: 'unit',
      additionalInstructions: 'Gere testes para um componente Angular usando signals. Teste tanto os m√©todos quanto o signal result. Use TestBed para configurar o componente.'
    };

    console.log('2. Gerando teste unit√°rio para componente Angular...');
    console.log('   C√≥digo do componente:');
    console.log('   ```typescript');
    console.log(angularComponentCode);
    console.log('   ```\n');
    console.log('   Aguardando resposta do ChatGPT...\n');

    const result = await chatGPTService.generateUnitTest(unitTestRequest);

    console.log('‚úÖ Teste unit√°rio gerado com sucesso!\n');
    console.log('üìù Explica√ß√£o:', result.explanation);
    console.log('\nüß™ Casos de teste:', result.testCases);
    console.log('\nüì¶ Depend√™ncias:', result.dependencies);
    
    if (result.setupInstructions) {
      console.log('\n‚öôÔ∏è Instru√ß√µes de configura√ß√£o:', result.setupInstructions);
    }

    console.log('\nüìÑ C√≥digo do teste gerado:');
    console.log('```typescript');
    console.log(result.testCode);
    console.log('```');

  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error);
  }
}

// Executar o teste
testAngularComponent();
