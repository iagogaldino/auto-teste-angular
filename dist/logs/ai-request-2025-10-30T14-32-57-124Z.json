{
  "messages": [
    {
      "role": "system",
      "content": "Você é um especialista em testes unitários. Sua tarefa é gerar testes unitários de alta qualidade para o código fornecido.\n\nINSTRUÇÕES:\n1. Analise o código fornecido cuidadosamente\n2. Identifique todas as funções, métodos e casos de teste necessários\n3. Gere testes que cubram casos positivos, negativos e edge cases\n4. Use o framework de teste apropriado para typescript\n5. Inclua comentários explicativos nos testes\n6. Certifique-se de que os testes são independentes e podem ser executados isoladamente\n\nINFORMAÇÕES IMPORTANTES SOBRE ANGULAR SIGNALS:\n- Para acessar o valor de um signal, use signal() não signal.value\n- Signals são funções, então para obter o valor: signal() \n- Para atualizar um signal: signal.set(novoValor)\n- Para ler um signal em testes: expect(component.signal()).toBe(valor)\n\nINFORMAÇÕES IMPORTANTES SOBRE COMPONENTES STANDALONE:\n- Componentes standalone NÃO podem ser declarados em declarations\n- Componentes standalone devem ser IMPORTADOS no array imports\n- Para testar componente standalone: TestBed.configureTestingModule({ imports: [ComponentName] })\n- NÃO use declarations para componentes standalone\n- Para obter instância: TestBed.createComponent(ComponentName) não TestBed.inject()\n- REGRA OBRIGATÓRIA: Se o componente é standalone, ele DEVE estar no array imports\n- Exemplo correto: \n  TestBed.configureTestingModule({ imports: [CalculatorComponent] });\n  const fixture = TestBed.createComponent(CalculatorComponent);\n  const component = fixture.componentInstance;\n- Exemplo INCORRETO: \n  TestBed.configureTestingModule({ imports: [CommonModule] }); // FALTANDO o componente standalone\n  TestBed.configureTestingModule({ declarations: [CalculatorComponent] }); // ERRADO para standalone\n\nRESPOSTA:\nResponda SOMENTE com o CÓDIGO DO TESTE, sem markdown, sem JSON, sem explicações. Não envolva em cercas de código.\n\nLinguagem: typescript\nFramework: jest\nTipo de teste: unit"
    },
    {
      "role": "user",
      "content": "Por favor, gere testes unitários para o seguinte código:\n\n```typescript\nimport { Component, signal } from '@angular/core';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { CalculatorComponent } from './calculator/calculator.component';\r\nimport { MathSuiteComponent } from './math-suite/math-suite.component';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  imports: [RouterOutlet, CalculatorComponent, MathSuiteComponent],\r\n  templateUrl: './app.html',\r\n  styleUrl: './app.scss'\r\n})\r\nexport class App {\r\n  protected readonly title = signal('test-angular');\r\n}\r\n\n```\n\nINFORMAÇÕES CRÍTICAS PARA IMPORTS:\n- Arquivo do componente: C:\\Users\\iago_\\Desktop\\Projects\\AutoUnitTest\\v1\\test-angular/src\\app\\app.ts\n- Nome do arquivo do componente: app.ts\n- Nome base do arquivo: app\n\nREGRA DE OURO PARA IMPORTS (ATENÇÃO - SIGA EXATAMENTE):\nO import CORRETO do componente deve ser APENAS:\n\nimport { ComponentName } from './app';\n\n❌ NÃO use: './app.component'\n❌ NÃO adicione '.component' no caminho do import\n✅ USE APENAS: './app'\n\nEXEMPLO:\nSe o arquivo é app.ts, o import correto é:\nimport { ComponentName } from './app';\n\n**IMPORTANTE: Use APENAS o nome base do arquivo no import, SEM adicionar '.component'!**\n\nInstruções adicionais: Gere testes para componentes Angular usando signals. Use TestBed.configureTestingModule com imports para componentes standalone.\n\nResponda SOMENTE com o CÓDIGO DO TESTE (sem markdown, sem JSON)."
    }
  ],
  "model": "gpt-3.5-turbo",
  "temperature": 0.7,
  "max_tokens": 2000
}