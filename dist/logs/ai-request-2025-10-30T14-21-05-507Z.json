{
  "messages": [
    {
      "role": "system",
      "content": "Você é um especialista em testes unitários. Sua tarefa é gerar testes unitários de alta qualidade para o código fornecido.\n\nINSTRUÇÕES:\n1. Analise o código fornecido cuidadosamente\n2. Identifique todas as funções, métodos e casos de teste necessários\n3. Gere testes que cubram casos positivos, negativos e edge cases\n4. Use o framework de teste apropriado para typescript\n5. Inclua comentários explicativos nos testes\n6. Certifique-se de que os testes são independentes e podem ser executados isoladamente\n\nINFORMAÇÕES IMPORTANTES SOBRE ANGULAR SIGNALS:\n- Para acessar o valor de um signal, use signal() não signal.value\n- Signals são funções, então para obter o valor: signal() \n- Para atualizar um signal: signal.set(novoValor)\n- Para ler um signal em testes: expect(component.signal()).toBe(valor)\n\nINFORMAÇÕES IMPORTANTES SOBRE COMPONENTES STANDALONE:\n- Componentes standalone NÃO podem ser declarados em declarations\n- Componentes standalone devem ser IMPORTADOS no array imports\n- Para testar componente standalone: TestBed.configureTestingModule({ imports: [ComponentName] })\n- NÃO use declarations para componentes standalone\n- Para obter instância: TestBed.createComponent(ComponentName) não TestBed.inject()\n- REGRA OBRIGATÓRIA: Se o componente é standalone, ele DEVE estar no array imports\n- Exemplo correto: \n  TestBed.configureTestingModule({ imports: [CalculatorComponent] });\n  const fixture = TestBed.createComponent(CalculatorComponent);\n  const component = fixture.componentInstance;\n- Exemplo INCORRETO: \n  TestBed.configureTestingModule({ imports: [CommonModule] }); // FALTANDO o componente standalone\n  TestBed.configureTestingModule({ declarations: [CalculatorComponent] }); // ERRADO para standalone\n\nRESPOSTA:\nResponda SOMENTE com o CÓDIGO DO TESTE, sem markdown, sem JSON, sem explicações. Não envolva em cercas de código.\n\nLinguagem: typescript\nFramework: jest\nTipo de teste: unit"
    },
    {
      "role": "user",
      "content": "Por favor, gere testes unitários para o seguinte código:\n\n```typescript\nimport { Component, computed, signal } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-math-suite',\r\n  standalone: true,\r\n  imports: [CommonModule, FormsModule],\r\n  templateUrl: './math-suite.component.html',\r\n  styleUrl: './math-suite.component.scss'\r\n})\r\nexport class MathSuiteComponent {\r\n  a = signal<number>(12);\r\n  b = signal<number>(8);\r\n\r\n  sum = computed(() => this.a() + this.b());\r\n  diff = computed(() => this.a() - this.b());\r\n  prod = computed(() => this.a() * this.b());\r\n  quot = computed(() => (this.b() === 0 ? NaN : this.a() / this.b()));\r\n  pow = computed(() => Math.pow(this.a(), this.b()));\r\n\r\n  gcd = computed(() => this.computeGcd(this.a(), this.b()));\r\n  lcm = computed(() => {\r\n    const g = this.gcd();\r\n    return g === 0 ? 0 : Math.abs(this.a() * this.b()) / g;\r\n  });\r\n\r\n  isAPrime = computed(() => this.isPrime(this.a()));\r\n  isBPrime = computed(() => this.isPrime(this.b()));\r\n\r\n  factorialA = computed(() => this.factorialSafe(this.a()));\r\n  factorialB = computed(() => this.factorialSafe(this.b()));\r\n\r\n  fibA = computed(() => this.fibonacciSafe(this.a()));\r\n  fibB = computed(() => this.fibonacciSafe(this.b()));\r\n\r\n  setA(value: number | string): void {\r\n    const num = Number(value);\r\n    if (!Number.isNaN(num)) this.a.set(num);\r\n  }\r\n\r\n  setB(value: number | string): void {\r\n    const num = Number(value);\r\n    if (!Number.isNaN(num)) this.b.set(num);\r\n  }\r\n\r\n  private computeGcd(x: number, y: number): number {\r\n    x = Math.abs(x);\r\n    y = Math.abs(y);\r\n    while (y !== 0) {\r\n      const t = y;\r\n      y = x % y;\r\n      x = t;\r\n    }\r\n    return x;\r\n  }\r\n\r\n  private isPrime(n: number): boolean {\r\n    n = Math.floor(n);\r\n    if (n <= 1) return false;\r\n    if (n <= 3) return true;\r\n    if (n % 2 === 0 || n % 3 === 0) return false;\r\n    for (let i = 5; i * i <= n; i += 6) {\r\n      if (n % i === 0 || n % (i + 2) === 0) return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  private factorialSafe(n: number): number | string {\r\n    n = Math.floor(n);\r\n    if (n < 0) return 'NaN';\r\n    if (n > 20) return 'Overflow';\r\n    let res = 1;\r\n    for (let i = 2; i <= n; i++) res *= i;\r\n    return res;\r\n  }\r\n\r\n  private fibonacciSafe(n: number): number | string {\r\n    n = Math.floor(n);\r\n    if (n < 0) return 'NaN';\r\n    if (n > 70) return 'Overflow';\r\n    if (n === 0) return 0;\r\n    if (n === 1) return 1;\r\n    let a = 0;\r\n    let b = 1;\r\n    for (let i = 2; i <= n; i++) {\r\n      const next = a + b;\r\n      a = b;\r\n      b = next;\r\n    }\r\n    return b;\r\n  }\r\n}\r\n\r\n\r\n\n```\n\nINFORMAÇÕES CRÍTICAS PARA IMPORTS:\n- Arquivo do componente: C:\\Users\\iago_\\Desktop\\Projects\\AutoUnitTest\\v1\\test-angular/src\\app\\math-suite\\math-suite.component.ts\n- Nome do arquivo do componente: math-suite.component.ts\n- Nome base do arquivo: math-suite.component\n\nREGRA DE OURO PARA IMPORTS (ATENÇÃO - SIGA EXATAMENTE):\nO import CORRETO do componente deve ser APENAS:\n\nimport { ComponentName } from './math-suite.component';\n\n❌ NÃO use: './math-suite.component.component'\n❌ NÃO adicione '.component' no caminho do import\n✅ USE APENAS: './math-suite.component'\n\nEXEMPLO:\nSe o arquivo é math-suite.component.ts, o import correto é:\nimport { ComponentName } from './math-suite.component';\n\nSe o arquivo é math-suite.component.ts, o import correto é:\nimport { ComponentName } from './math-suite.component';\n\n**IMPORTANTE: Use APENAS o nome base do arquivo no import, SEM adicionar '.component'!**\n\nInstruções adicionais: Gere testes para componentes Angular usando signals. Use TestBed.configureTestingModule com imports para componentes standalone.\n\nResponda SOMENTE com o CÓDIGO DO TESTE (sem markdown, sem JSON)."
    }
  ],
  "model": "gpt-3.5-turbo",
  "temperature": 0.7,
  "max_tokens": 2000
}